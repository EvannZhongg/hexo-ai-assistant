<!-- AI Assistant Chatbot -->
<div id="chatbot-toggle" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999;">
  <button id="toggle-chat" style="
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: #fff;
    color: #333;
    border: 1px solid #ddd;
    font-size: 22px;
    cursor: pointer;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    transition: transform 0.2s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
  ">
    ü§ñ
  </button>

</div>

<!-- ËÅäÂ§©Á™óÂè£ÔºöÂàùÂßãÈöêËóèÔºåÁî± JS ÊéßÂà∂ÊòæÁ§∫ -->
<div id="chatbot-window" style="display: none; position: fixed; bottom: 80px; right: 20px; width: 340px; height: 480px; background: #fff; border: 1px solid #e0e0e0; z-index: 9999; box-shadow: 0 4px 8px rgba(0,0,0,0.1); border-radius: 12px; overflow: hidden; flex-direction: column;">
  <div style="background: #fff; color: #333; padding: 12px 16px; font-size: 16px; font-weight: bold; display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #e0e0e0;">
    Hexo AI Âä©Êâã
    <button id="close-chat" style="background: none; border: none; color: #333; font-size: 20px; cursor: pointer;">√ó</button>
  </div>
  <div id="chat-log" style="flex-grow: 1; padding: 12px; overflow-y: auto; font-size: 14px; background: #fafafa;"></div>
  <div style="padding: 10px 16px; display: flex; background: #fff; border-top: 1px solid #e0e0e0;">
    <input type="text" id="chat-input" placeholder="ËæìÂÖ•‰Ω†ÁöÑÈóÆÈ¢ò..." style="flex: 1; padding: 8px 10px; border-radius: 6px; border: 1px solid #ccc; font-size: 14px; outline: none;">
    <button id="send-chat" style="margin-left: 8px; padding: 8px 12px; border-radius: 6px; border: none; background: #f0f0f0; color: #333; font-size: 14px; cursor: pointer;">ÂèëÈÄÅ</button>
  </div>
</div>

<!-- ÂºïÂÖ• marked.js -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<!-- Ê†∑Âºè‰ºòÂåñ -->
<style>
  #chat-log p, #chat-log li, #chat-log ul, #chat-log ol {
    margin: 2px 0 !important;
    line-height: 1.5;
    font-size: 13px;
  }
  #chat-log a {
    color: #2b6cb0;
    text-decoration: underline;
    font-weight: 500;
    transition: all 0.2s ease;
  }
  #chat-log a:hover {
    color: #1a4f8a;
    background-color: #eef3f9;
  }
  #chat-log pre {
    background-color: #f4f4f4;
    border: 1px solid #ddd;
    padding: 6px 10px;
    border-radius: 5px;
    overflow-x: auto;
    font-size: 12.5px;
    font-family: Consolas, monospace;
    white-space: pre-wrap;
    word-break: break-word;
    margin: 6px 0;
  }
  #chat-log code {
    background-color: #f0f0f0;
    padding: 1px 4px;
    border-radius: 3px;
    font-family: Consolas, monospace;
  }
  #chat-log code[class*="language-"]::before {
    content: '';
  }
</style>


<script>
  const toggleBtn = document.getElementById('toggle-chat');
  const closeBtn = document.getElementById('close-chat');
  const chatWindow = document.getElementById('chatbot-window');
  const chatLog = document.getElementById('chat-log');
  const chatInput = document.getElementById('chat-input');
  const sendBtn = document.getElementById('send-chat');

  let isChatVisible = false;

  window.addEventListener("DOMContentLoaded", () => {
    chatWindow.style.display = "none";
  });

  toggleBtn.onclick = () => {
    isChatVisible = !isChatVisible;
    chatWindow.style.display = isChatVisible ? 'flex' : 'none';
  };

  closeBtn.onclick = () => {
    isChatVisible = false;
    chatWindow.style.display = 'none';
  };

  function cleanMarkdown(md) {
    return md.replace(/\n{3,}/g, '\n\n').replace(/^\s+|\s+$/g, '').trim();
  }

  function appendMessage(role, rawContent) {
    const content = cleanMarkdown(rawContent);
    const msg = document.createElement('div');
    msg.style.marginBottom = '6px';
    msg.style.display = 'flex';
    msg.style.alignItems = 'flex-start';

    const avatar = document.createElement('div');
    avatar.style.fontSize = '18px';
    avatar.style.marginRight = '5px';
    avatar.textContent = role === 'user' ? 'üôÇ' : 'ü§ñ';

    const bubble = document.createElement('div');
    bubble.style.padding = '6px 10px';
    bubble.style.borderRadius = '10px';
    bubble.style.maxWidth = '220px';
    bubble.style.background = role === 'user' ? '#e2e2e2' : '#f0f0f0';
    bubble.style.lineHeight = '1.5';
    bubble.style.fontSize = '13px';
    bubble.style.wordBreak = 'break-word';

    bubble.innerHTML = role === 'user'
      ? marked.parseInline(content)
      : marked.parse(content);

    msg.style.justifyContent = role === 'user' ? 'flex-end' : 'flex-start';
    msg.appendChild(role === 'user' ? bubble : avatar);
    msg.appendChild(role === 'user' ? avatar : bubble);
    chatLog.appendChild(msg);
    chatLog.scrollTop = chatLog.scrollHeight;
  }

  async function sendMessage() {
    const query = chatInput.value.trim();
    if (!query) return;
    appendMessage('user', query);
    chatInput.value = '';

    const response = await fetch('https://***.ngrok-free.app/ask', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify({ query })
    });

    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let buffer = '';

    const aiMsg = document.createElement('div');
    aiMsg.style.marginBottom = '6px';
    aiMsg.style.display = 'flex';
    aiMsg.style.alignItems = 'flex-start';

    const avatarAI = document.createElement('div');
    avatarAI.style.fontSize = '18px';
    avatarAI.style.marginRight = '5px';
    avatarAI.textContent = 'ü§ñ';

    const bubble = document.createElement('div');
    bubble.style.padding = '6px 10px';
    bubble.style.borderRadius = '10px';
    bubble.style.maxWidth = '220px';
    bubble.style.background = '#f0f0f0';
    bubble.style.lineHeight = '1.5';
    bubble.style.fontSize = '13px';
    bubble.style.wordBreak = 'break-word';

    aiMsg.appendChild(avatarAI);
    aiMsg.appendChild(bubble);
    chatLog.appendChild(aiMsg);
    chatLog.scrollTop = chatLog.scrollHeight;

    while (true) {
      const { done, value } = await reader.read();
      if (done) break;
      buffer += decoder.decode(value, { stream: true });
      bubble.innerHTML = marked.parse(cleanMarkdown(buffer));
      chatLog.scrollTop = chatLog.scrollHeight;
    }

    bubble.innerHTML = marked.parse(cleanMarkdown(buffer));
  }

  sendBtn.onclick = sendMessage;
  chatInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter") sendMessage();
  });

  window.addEventListener("click", (e) => {
    if (
      isChatVisible &&
      !chatWindow.contains(e.target) &&
      !toggleBtn.contains(e.target)
    ) {
      isChatVisible = false;
      chatWindow.style.display = 'none';
    }
  });
</script>
